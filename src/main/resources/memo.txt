* 공부 내용
회원 가입 후 로그인 할 때 JWT 토근을 생성하여 클라이언트에게 돌려주고
이후 클라이언트가 JWT 토큰을 이용해서 로그인하는 서비스를 만들어 보기


* 세션, JWT 개념에 대해서는 별도 정리 노트 참고


* SecurityConfig httpBasic().disable()이란?
쿠키 기본 정책은 동일 도메인에서만 요청이 올 때 작동한다.

자바스크립트로 요청 시 쿠키를 강제로 담아서 요청할 수 있는데,
대부분 서버들은 http only: true로 설정하여 웹브라우저에서 요청(정상적인 요청)이 아니라
자바스크립트로 요청하는 경우 거부한다.
1. http only: false로 변경하면 요청을 받을 수 있지만, 보안문제가 생긴다.
2. 쿠키 방식은 서버가 많아질수록 확장성이 떨어진다.

-> 헤더에 Authorization 값에 인증 정보를 넣고 가는 방식이 있는데,
인증 정보로 ID, PW를 담아서 요청하는 방식이 http Basic
이는, ID, PW가 암호화가 안 되기 때문에 노출 위험이 있다.
노출을 막으려면 https를 사용해야 하며, 이때는 인증 정보가 암호화 되서 전송 된다.


* Bearer 방식
Authorization에 ID, PW 말고 토큰을 넣을건데,
토큰은 노출이 되어도 ID, PW에 비해 위험 부담이 적다.
토큰은 유효시간이 있다. 토근을 만들 때 jwt 토큰을 만들어서 사용할 것

필터를 이용해서 jwt 토큰 처리하기

* .formLogin().disable() 설정
.formLogin().loginProcessingUrl("/login")
/login(기본설정값)으로 요청이 오면 스프링 시큐리티가 작동하는데 disable 사용 시 위와 같은 처리가 안됨



* 기존 세션 방식
1. 로그인 정상 처리되면
2. 서버쪽 세션 ID 생성, 클라이언트 쿠키 세션 ID를 응답
3. 이후 요청할 때마다 쿠키값 세션 ID를 항상 들고 요청하기 때문에
서버는 세션 ID가 유효한지 판단해서 유효하면 인증이 필요한 페이지로 접근 가능하게 함

* JWT 토큰 방식
1. 로그인 정상 처리되면
2. JWT 토큰 생성, 클라이언트 쪽으로 JWT 토큰을 응답 (클라이언트 어느 영역에 JWT 토큰이 저장되는가...?)
3. 이후 요청할 때마다 JWT 토큰을 가지고 요청하니까
서버는 JWT 토큰이 유효한지 판단 (판단하는 필터를 만들어야 함)

클라이언트가 토큰 받는 것 까지 했음-----------------------------------------------------------

마지막 강의에서는 JWT 토큰이 유효한지 판단하는 필터를 만들 예정
클라이언트가 JWT 토큰을 이용하여 해당 개인 정보에 접근을 하게 되면 전자서명을 통해서 개인정보에 접근할 수 있게 구현할거임


* 로그아웃에 대한 문제가 남았다....
세션만 날리면 권한이 사라진다는데?
기본적으로 JWT는 서버쪽에서 로그아웃을 할 수 없습니다.
그래서 보통은 JWT 토큰 주기를 짧게 하거나 또는 로그아웃 기능을 구현하려고 토큰을 DB에 보존하고
매 요청시 마다 로그아웃으로 인해 DB에서 삭제된 토큰이 아닌지등을 검사하여 비슷하게 구현할 수 있습니다.
이외에도 비슷하지만 다른 구현방법이 있습니다.
외부에 API를 제공하여 사용하는게 아니면 JWT 사용하지 않고 단순 Cookie Session 방식을 사용하시기를 권해드립니다.

결론은 redis에 대해 알아보기
